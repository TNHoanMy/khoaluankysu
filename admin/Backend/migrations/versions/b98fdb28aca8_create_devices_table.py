"""create devices table

Revision ID: b98fdb28aca8
Revises: 
Create Date: 2025-05-21 15:54:22.875112

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'b98fdb28aca8'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('auth_logs')
    op.drop_table('face_data')
    op.drop_table('transactions')
    with op.batch_alter_table('devices', schema=None) as batch_op:
        batch_op.add_column(sa.Column('device_name', sa.String(length=100), nullable=False))
        batch_op.add_column(sa.Column('device_type', sa.String(length=50), nullable=False))
        batch_op.add_column(sa.Column('status', sa.String(length=20), nullable=True))
        batch_op.alter_column('id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text('gen_random_uuid()'))
        batch_op.alter_column('location',
               existing_type=sa.TEXT(),
               type_=sa.String(length=100),
               existing_nullable=True)
        batch_op.drop_column('bus_code')
        batch_op.drop_column('last_ping_at')
        batch_op.drop_column('is_active')
        batch_op.drop_column('name')

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('full_name',
               existing_type=sa.TEXT(),
               type_=sa.String(length=100),
               existing_nullable=False)
        batch_op.alter_column('phone',
               existing_type=sa.TEXT(),
               type_=sa.String(length=15),
               existing_nullable=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('phone',
               existing_type=sa.String(length=15),
               type_=sa.TEXT(),
               existing_nullable=False)
        batch_op.alter_column('full_name',
               existing_type=sa.String(length=100),
               type_=sa.TEXT(),
               existing_nullable=False)

    with op.batch_alter_table('devices', schema=None) as batch_op:
        batch_op.add_column(sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('last_ping_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('bus_code', sa.TEXT(), autoincrement=False, nullable=False))
        batch_op.alter_column('location',
               existing_type=sa.String(length=100),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False,
               autoincrement=True,
               existing_server_default=sa.text('gen_random_uuid()'))
        batch_op.drop_column('status')
        batch_op.drop_column('device_type')
        batch_op.drop_column('device_name')

    op.create_table('transactions',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('amount', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('note', sa.TEXT(), autoincrement=False, nullable=True),
    sa.CheckConstraint("type = ANY (ARRAY['deposit'::text, 'deduct'::text])", name='transactions_type_check'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='transactions_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='transactions_pkey')
    )
    op.create_table('face_data',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('encrypted_vector', postgresql.BYTEA(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='face_data_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='face_data_pkey')
    )
    op.create_table('auth_logs',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('device_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('success', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('deducted', sa.NUMERIC(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('note', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['devices.id'], name='auth_logs_device_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='auth_logs_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='auth_logs_pkey')
    )
    # ### end Alembic commands ###
